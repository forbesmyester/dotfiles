#!/bin/bash

ONLY_PRINT=0

_KAK_NAME="$( get_directory_identity )"

show_help() {
    echo "$1"
    echo ""
    echo "-s SESSION_NAME = Use session name specified as apposed to one derived from the directory"
    echo "-l = List kakoune sessions"
    echo "-K SESSION_NAME = Pick a kakoune session to destroy"
    echo "-k = Pick a kakoune session to destroy"
    echo "-p = Print the SESSION_NAME"
    echo "-t = Create a temporary kakoune session (it just runs kak!)"
    echo "-h = Display this help"
    echo ""
    exit 0
}

while getopts "hlktps:K:" opt; do
    case "$opt" in
        h)
            show_help
            exit 0
            ;;
        p)
            ONLY_PRINT=1
            ;;
        s)
            _KAK_NAME="$OPTARG"
            if [ -n "$KAKOUNE_SESSION" ]; then
                echo 'Session cannot be specified when in an existing $KAKOUNE_SESSION'
                exit 1
            fi
            ;;
        l)
            kak -l
            exit 0
            ;;
        t)
            shift $(( OPTIND - 1 ))
            kak "$@"
            exit 0
            ;;
        k)
            kak -l | fzf | parallel kak -c {} -ui dummy -e kill
            exit 0
            ;;
        K)
            kak -c "$OPTARG" -ui dummy -e kill
            exit 0
            ;;
    esac
done
shift $(( OPTIND - 1 ))

echo "KAK_NAME: $_KAK_NAME"
if [ "$ONLY_PRINT" -gt 0 ]; then
    exit
fi
kak -clear
# [ -z "$(kak -l | grep -F -x "$_KAK_NAME")" ] && setsid kak -d -s "$_KAK_NAME" &
# while ! kak -l | grep -F -x "$_KAK_NAME"; do
#     echo "WAITING FOR $_KAK_NAME"
#     sleep 0.1
# done
# kak -c "$_KAK_NAME" "$@"

if [ -z "$(kak -l | grep -F -x "$_KAK_NAME")" ]; then
    echo "s"
    exec kak -s "$_KAK_NAME" "$@"
else
    echo "c"
    exec kak -c "$_KAK_NAME" "$@"
fi
