#!/bin/bash
set -euo pipefail
IFS=$'\n\t'

# ./backup baksnap /mnt/tmp2 /dev/store/family_media @root sftp:badmin@b.lang.speechmarks.com /mnt/restic_sftp/family_media

function snap_btrfs_mount {
    local DEVICE_MOUNTPOINT="$1"
    local DEVICE="$2"
    cat /etc/mtab  | awk '{ print $2 }' | grep -v -F "$DEVICE_MOUNTPOINT" > /dev/null
    mount "$DEVICE" "$DEVICE_MOUNTPOINT"
}

function snap_btrfs_create {
    local SNAP_PRE="$1"
    local DEVICE_MOUNTPOINT="$2"
    local DEVICE="$3"
    local SOURCE_SUBVOL="$4"

    local SOURCE_SUBVOL_NAME="$( echo $SOURCE_SUBVOL | sed 's/.//')"
    EXISTING_SNAPS="$(find "$DEVICE_MOUNTPOINT" -maxdepth 1 -mindepth 1 -type d  | parallel -j 1 basename | grep "^${SNAP_PRE}-$SOURCE_SUBVOL_NAME" || true)"
    EXISTING_SNAPS_COUNT="$(echo "$EXISTING_SNAPS" | awk 'BEGIN { C=0 }; /./ {C=C+1}; END { print C }')"
    if [ "$EXISTING_SNAPS_COUNT" -gt 0 ]; then
        echo "$EXISTING_SNAPS"
        exit 3
    fi
    DEST_NAME="${SNAP_PRE}-${SOURCE_SUBVOL_NAME}-$(date --iso-8601=seconds)"
    btrfs subvolume snapshot -r "${DEVICE_MOUNTPOINT}/$SOURCE_SUBVOL" "${DEVICE_MOUNTPOINT}/$DEST_NAME" > /dev/null
    echo "$DEST_NAME"
}

function snap_btrfs_clean {
    local SNAP_PRE="$1"
    local DEVICE_MOUNTPOINT="$2"
    local SOURCE_SUBVOL="$3"

    function double_check {
        echo "$2" | grep '^[^@]' && btrfs subvolume delete "$1/$2"
    }
    export -f double_check

    local SOURCE_SUBVOL_NAME="$( echo $SOURCE_SUBVOL | sed 's/.//')"
    (find "$DEVICE_MOUNTPOINT" -maxdepth 1 -mindepth 1 -type d  | parallel -j 1 basename | grep "^${SNAP_PRE}-$SOURCE_SUBVOL_NAME" || true) | parallel -j 1 double_check "$DEVICE_MOUNTPOINT" {}
    sleep 1
    cat /etc/mtab  | awk '{ print $2 }' | grep -F "$DEVICE_MOUNTPOINT" && umount "$DEVICE_MOUNTPOINT" || true
}


function x_cleanup {
    local DEVICE_MOUNTPOINT="$2"
    cat /etc/mtab  | awk '{ print $2 }' | grep -F "$DEVICE_MOUNTPOINT" || true
    local SNAPS=$(lvs -S "(lv_attr =~ ^s) && (vg_name = ${LVGRP})" --separator ':' --noheadings | sed 's/^ *//' | awk -F ':' '{ print $1 }')
    for SNAP in $SNAPS; do
        echo "$SNAP"
        echo "Unmounting: /dev/$LVGRP/$SNAP"
        umount -f "/dev/$LVGRP/$SNAP" || true
        echo "Removing snap: $SNAP"
        lvremove -y "$LVGRP/$SNAP"
    done
}


function restic_sftp_backup {
    DEVICE_MOUNTPOINT="$1"
    SNAPSHOT_ROOT="$2"
    RESTIC_SUBDIR="$3"
    RESTIC_REPOSITORY_ROOT="$4"
    RESTIC_REPOSITORY_NAME="$5"

    cd "$DEVICE_MOUNTPOINT/$SNAPSHOT_ROOT/$RESTIC_SUBDIR"
    echo restic -r "$RESTIC_REPOSITORY_ROOT/${RESTIC_REPOSITORY_NAME}" backup .
    restic -r "$RESTIC_REPOSITORY_ROOT/${RESTIC_REPOSITORY_NAME}" backup .
}

# BACKUPARG_LOGICAL_VOLUME="$2"
# BACKUPARG_SUBVOL="$3"
# BACKUPARG_INTERNAL_DIRECTORY="$4"
# BACKUPARG_RESTIC_REPOSITORY_NAME="$5"

# BACKUPARG_VOLUME_GROUP="store"
# BACKUPARG_SNAP_PRE="baksnap"
# BACKUPARG_DEVICE_MOUNTPOINT="/mnt/baksnap"
# BACKUPARG_DEVICE="/dev/$BACKUPARG_VOLUME_GROUP/$BACKUPARG_LOGICAL_VOLUME"
# BACKUPARG_RESTIC_REPOSITORY_ROOT="/mnt/restic_sftp"

if [[ ! "$BACKUPARG_SUBVOL" =~ ^@[a-z]+$ ]]; then
    exit 2
fi

function cleanup {
    cd /
    sleep 1
    snap_btrfs_clean "$BACKUPARG_SNAP_PRE" "$BACKUPARG_DEVICE_MOUNTPOINT" "$BACKUPARG_SUBVOL"
    # sleep 1
    # cat /etc/mtab  | awk '{ print $2 }' | grep -v -F "$BACKUPARG_DEVICE_MOUNTPOINT" > /dev/null && umount "$BACKUPARG_DEVICE_MOUNTPOINT" || true
}

trap cleanup EXIT

# bak_sftp_process "$BACKUPARG_DEVICE_MOUNTPOINT" "$BACKUPARG_RESTIC_REPOSITORY"


# function do_mount {
#     DATE=$(date "+%Y%m%d-%H%M")
#     SRC_FS="$1"
#     SRC_INTLOC="$2"
#     SNAP="snap-${DATE}-$(echo "$SRC_FS" | awk '{print tolower($0)}' | sed 's/[^a-z0-9]/_/g')-$(echo "$SRC_INTLOC" | awk '{print tolower($0)}' | sed 's/[^a-z0-9]/_/g')"
#     lvcreate -L 32G -s -n "${LVGRP}/$SNAP" "$SRC_FS"
#     mkdir -p "/tmp/$SNAP"
#     MOUNTPOINT="/tmp/$SNAP"
#     mount -o nouuid "/dev/$LVGRP/$SNAP" "$MOUNTPOINT"
#     echo "$MOUNTPOINT/$SRC_INTLOC"
# }


# cleanup
# 
# ENVIRONMENT_FILE=$HOME/.backup
# BACKUP_NAMES=$(cat "$ENVIRONMENT_FILE" | jq -r ._name)
# for BACKUP_NAME in $BACKUP_NAMES; do
#     LOCATIONS="$(cat "$ENVIRONMENT_FILE" | jq -r "select(._name == \"$BACKUP_NAME\") | .locations[].location")"
#     for LOCATION in $LOCATIONS; do
#         if [ "$#" -gt 0 ] && [ "$LOCATION" != "$1" ]; then
#             continue
#         fi
#         LINE="$(cat "$ENVIRONMENT_FILE" | jq "select(._name == \"$BACKUP_NAME\")")"
#         echo ">> $BACKUP_NAME -> $LOCATION"
#         JSON="$(echo "$LINE" | jq ". + (.locations[] | select(.location == \"$LOCATION\") | .info) + {\"method\":(.locations[] | select(.location == \"$LOCATION\") | .method)} | del(.locations)")"
#         . ndjson-env -a "$JSON"
#         # . ndjson-env -f "$ENVIRONMENT_FILE" "$BACKUP_NAME"
#         export RESTIC_DIRECTORY="$(do_mount "/dev/$LVGRP/${LOGICAL_VOLUME}" "$INTERNAL_DIRECTORY" | tail -n1)"
#         echo ">>> $BACKUP_NAME $RESTIC_DIRECTORY"
#         backup_$method "$BACKUP_NAME" "$RESTIC_DIRECTORY"
#         cleanup
#     done
# done


cleanup
snap_btrfs_mount "$BACKUPARG_DEVICE_MOUNTPOINT" "$BACKUPARG_DEVICE"
SNAPSHOT_ROOT="$(snap_btrfs_create "$BACKUPARG_SNAP_PRE"  "$BACKUPARG_DEVICE_MOUNTPOINT" "$BACKUPARG_DEVICE" "$BACKUPARG_SUBVOL")"
restic_${BACKUPARG_METHOD}_backup "$BACKUPARG_DEVICE_MOUNTPOINT" "$SNAPSHOT_ROOT" "$BACKUPARG_INTERNAL_DIRECTORY" "$BACKUPARG_RESTIC_REPOSITORY_ROOT" "$BACKUPARG_RESTIC_REPOSITORY_NAME"
