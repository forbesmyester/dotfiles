#!/bin/bash
set -euo pipefail
IFS=$'\n\t'

# Generate ~/.backup by `pass ls Backup/ | sed '1d' | sed 's/.* //' | parallel -j 1 pass show Backup/{} '|' awk -v PASSWORD_NAME=RESTIC_PASSWORD -v PRE=BACKUPARG_ -f serialize_gnu_pass.awk BACKUPARG_RESTIC_REPOSITORY_NAME={=s/.*://=} > ~/.backup`

SELECTED=""
if [ "$#" -eq 1 ]; then
    SELECTED="$1"
fi

if [ -z "$PGPASSWORD" ]; then
    echo "Must also have postgresql env vars"
    exit 1
fi

ENVIRONMENT_FILE=$HOME/.backup
BACKUP_NAMES=$(cat "$ENVIRONMENT_FILE" | jq -r .BACKUPARG_RESTIC_REPOSITORY_NAME)
for BACKUP_NAME in $BACKUP_NAMES; do

    if [ "$SELECTED" != "" ] && [ "$SELECTED" != "$BACKUP_NAME" ]; then
        continue
    fi


    LINE="$(cat "$ENVIRONMENT_FILE" | jq "select(.BACKUPARG_RESTIC_REPOSITORY_NAME == \"$BACKUP_NAME\")")"
    echo ">> $BACKUP_NAME = $LINE"
    . ndjson-env -a "$LINE"

    # BACKUPARG_SUBVOL=""                 # FROM ndjson
    # BACKUPARG_INTERNAL_DIRECTORY=""     # FROM ndjson
    # BACKUPARG_RESTIC_REPOSITORY_NAME="" # FROM ndjson
    # BACKUPARG_LOGICAL_VOLUME=""         # FROM ndjson

    export BACKUPARG_VOLUME_GROUP="$BACKUPARG_VOLUME_GROUP"
    export BACKUPARG_SNAP_PRE="baksnap"
    export BACKUPARG_DEVICE="/dev/$BACKUPARG_VOLUME_GROUP/$BACKUPARG_LOGICAL_VOLUME"
    export BACKUPARG_METHOD=sftp
    export BACKUPARG_DEVICE_MOUNTPOINT="/tmp/baksnap-$(date --iso-8601=seconds | sed 's/\+.*//')"
    export BACKUPARG_RESTIC_REPOSITORY_ROOT="sftp://badmin@10.111.222.2:2222//mnt/restic_sftp"
    mkdir "$BACKUPARG_DEVICE_MOUNTPOINT"

    SQL="insert into backup_location (volume_group, logical_volume, subvol, internal_directory) values
        ('$BACKUPARG_VOLUME_GROUP', '$BACKUPARG_LOGICAL_VOLUME', '$BACKUPARG_SUBVOL', '$BACKUPARG_INTERNAL_DIRECTORY')
        on conflict do nothing"

    echo "$SQL" | psql


    function insert_snapshot() {
        JSON_LINE="$@"
        echo "
            WITH
                x (j, volume_group, logical_volume, subvol, internal_directory) AS (
                    SELECT
                        '$JSON_LINE'::jsonb,
                        '$BACKUPARG_VOLUME_GROUP',
                        '$BACKUPARG_LOGICAL_VOLUME',
                        '$BACKUPARG_SUBVOL',
                        '$BACKUPARG_INTERNAL_DIRECTORY'),
                y as (
                    select
                        (
                            select backup_location_id from backup_location
                            where (volume_group, logical_volume, subvol, internal_directory) = (x.volume_group, x.logical_volume, x.subvol, x.internal_directory)
                        ) as backup_location_id,
                        jsonb_path_query(j, '$.id') as snapshot_restic_id,
                        jsonb_path_query(j, '$.tree') as tree,
                        cast(cast(jsonb_path_query(j, '$.time.datetime()') as varchar) as timestamp with time zone) as backup_date from x
                )
                insert into backup_snapshot (backup_location_id, snapshot_restic_id, tree, backup_date)
                    select backup_location_id, snapshot_restic_id, tree, backup_date from  y
            " | psql

    }
    export -f insert_snapshot

    backup_worker
    restic -r "$BACKUPARG_RESTIC_REPOSITORY_ROOT/${BACKUPARG_RESTIC_REPOSITORY_NAME}" forget --prune --keep-within 21d --keep-last 3 --keep-weekly 3 --keep-monthly 6 --keep-yearly 10
    restic --json -r "$BACKUPARG_RESTIC_REPOSITORY_ROOT/${BACKUPARG_RESTIC_REPOSITORY_NAME}" snapshots | \
        mlr --ijson --ojsonl put '$time = sub(sub($time,"\..+",""), "T", " ")' | parallel -j 1 insert_snapshot {}





done

