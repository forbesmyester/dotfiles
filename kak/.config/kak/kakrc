eval %sh{kak-lsp --kakoune -s $kak_session}
# set global lsp_cmd "kak-lsp -s %val{session} -vvv --log /tmp/kak-lsp.log"
hook global WinSetOption filetype=(rust|python|go|javascript|typescript|c|cpp) %{
    lsp-enable-window
}

hook global WinSetOption filetype=rust %{
  hook window -group semantic-tokens BufReload .* lsp-semantic-tokens
  hook window -group semantic-tokens NormalIdle .* lsp-semantic-tokens
  hook window -group semantic-tokens InsertIdle .* lsp-semantic-tokens
  hook -once -always window WinSetOption filetype=.* %{
    remove-hooks window semantic-tokens
  }
}

hook global WinSetOption filetype=rust %{
  hook window -group rust-inlay-hints BufReload .* rust-analyzer-inlay-hints
  hook window -group rust-inlay-hints NormalIdle .* rust-analyzer-inlay-hints
  hook window -group rust-inlay-hints InsertIdle .* rust-analyzer-inlay-hints
  hook -once -always window WinSetOption filetype=.* %{
    remove-hooks window rust-inlay-hints
  }
}

source "%val{config}/plugins/plug.kak/rc/plug.kak"

hook global WinCreate ^[^*]+$ %{
    add-highlighter window/ number-lines -hlcursor -separator " " -relative
}

# editorconfig
hook global BufOpenFile .* %{ editorconfig-load }
hook global BufNewFile .* %{ editorconfig-load }

hook global WinCreate .* %{
    # declare-option str termcmd 'uxterm -e sh -c'
    colorscheme tomorrow-night
    add-highlighter global/ wrap -indent # -word
}
# plug "insipx/kak-crosshairs"

define-command unset-run-after-write -params 0 -docstring 'Unset repl command to run after write' %{
    remove-hooks buffer set-run-after-write
}
define-command set-run-after-write -params 1 -docstring 'Set repl command to run after write' %{
    declare-option str auto_repl_command %arg{1}
    remove-hooks buffer set-run-after-write
    hook -group set-run-after-write buffer BufWritePost .* %{
        repl-send-text %opt{auto_repl_command}
    }
}

plug "lePerdu/kakboard" %{
    hook global WinCreate .* %{ kakboard-enable }
}


set-option global tabstop 4
set-option global indentwidth 4
set-option global scrolloff 3,5
add-highlighter global/ regex \h+$ 0:Error

# plug "alexherbo2/yank-ring.kak" %{
# }
plug "alexherbo2/prelude.kak"
plug "alexherbo2/connect.kak" defer connect %{} config %{
    define-command nnn-persistent -params 0..1 -file-completion -docstring 'Open file with nnn' %{
        connect-terminal nnn %sh{echo "${@:-$(dirname "$kak_buffile")}"}
    }

    map global user t ' :connect-terminal<ret>' -docstring 'open terminal'

    alias global nnn nnn-persistent
} demand
require-module prelude
require-module connect


plug "https://gitlab.com/Screwtapello/kakoune-shellcheck"

plug "h-youhei/kakoune-surround" %{
    declare-user-mode surround
    map global surround s ':surround<ret>' -docstring 'surround'
    map global surround c ':change-surround<ret>' -docstring 'change'
    map global surround d ':delete-surround<ret>' -docstring 'delete'
    map global surround t ':select-surrounding-tag<ret>' -docstring 'select tag'
    map global user s ':enter-user-mode surround<ret>' -docstring "Surround"
}


# map -docstring "Enter LSP mode" global goto gl '\: enter-user-mode lsp<ret>'

plug "andreyorst/smarttab.kak" defer smarttab %{
    # when `backspace' is pressed, 4 spaces are deleted at once
    set-option global softtabstop 4
} config %{
    # these languages will use `expandtab' behavior
    hook global WinSetOption filetype=(rust|markdown|kak|lisp|scheme|sh|perl|typescript|scala) expandtab
    # these languages will use `noexpandtab' behavior
    hook global WinSetOption filetype=(makefile|gas) noexpandtab
    # these languages will use `smarttab' behavior
    hook global WinSetOption filetype=(c|cpp) smarttab
}

# plug "andreyorst/powerline.kak" config %{
#     powerline-start
# }

plug "andreyorst/fzf.kak"

# evaluate-commands %sh{
#     case $(uname) in
#         Linux) copy="xclip -selection clipboard -i"; paste="xclip -selection clipboard -o" ;;
#         Darwin)  copy="pbcopy"; paste="pbpaste" ;;
#     esac
#
#     printf "map global user -docstring 'paste (after) from clipboard' p '!%s<ret>'\n" "$paste"
#     printf "map global user -docstring 'paste (before) from clipboard' P '<a-!>%s<ret>'\n" "$paste"
#     printf "map global user -docstring 'yank to clipboard' y '<a-|>%s<ret>:echo -markup %%{{Information}copied selection to X11 clipboard}<ret>'\n" "$copy"
#     printf "map global user -docstring 'replace from clipboard' R '|%s<ret>'\n" "$paste"
# }

define-command -hidden -docstring \
"select a word under cursor, or add cursor on next occurrence of current selection" \
select-or-add-cursor %{
    try %{
        execute-keys "<a-k>\A.\z<ret>"
        execute-keys -save-regs '' "_<a-i>w*"
    } catch %{
        execute-keys -save-regs '' "_*<s-n>"
    } catch nop
}

map global normal '<ret>' ';'
set-option global ui_options ncurses_change_colors=false ncurses_enable_mouse=false

