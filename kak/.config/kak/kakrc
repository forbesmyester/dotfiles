# The following commands must be ran
#
# ln -s "~/.local/share/kak/autoload" "autoload/standard-library"
# git clone -q https://github.com/kakounedotcom/prelude.kak.git "autoload/prelude.kak"
# git clone -q https://github.com/kakounedotcom/connect.kak.git "autoload/connect.kak"


evaluate-commands %sh{
    plugins="$kak_config/plugins"
    mkdir -p "$plugins"
    [ ! -e "$plugins/plug.kak" ] && \
    git clone -q https://github.com/andreyorst/plug.kak.git "$plugins/plug.kak"
    printf "%s\n" "source '$plugins/plug.kak/rc/plug.kak'"
}

plug "andreyorst/plug.kak" noload
plug "kakounedotcom/prelude.kak"
plug "kakounedotcom/connect.kak"

# kak-lsp

    plug "kak-lsp/kak-lsp" do %{
        cargo install --locked --force --path .
    }
    map global user , ' :lsp-hover<ret>' -docstring 'lsp-hover'
    map global user l ' :enter-user-mode lsp<ret>' -docstring 'lsp-mode'
    set-option global lsp_auto_highlight_references true

    # set global lsp_cmd "kak-lsp -s %val{session} -vvv --log /tmp/kak-lsp.log"
    hook global WinSetOption filetype=(rust|javascript|typescript) %{
        lsp-enable-window
        # lsp-auto-signature-help-enable
    }

    hook global WinSetOption filetype=rust %{
      hook window -group semantic-tokens BufReload .* lsp-semantic-tokens
      hook window -group semantic-tokens NormalIdle .* lsp-semantic-tokens
      hook window -group semantic-tokens InsertIdle .* lsp-semantic-tokens
      hook -once -always window WinSetOption filetype=.* %{
        remove-hooks window semantic-tokens
      }
    }

    hook global WinSetOption filetype=rust %{
      hook window -group rust-inlay-hints BufReload .* rust-analyzer-inlay-hints
      hook window -group rust-inlay-hints NormalIdle .* rust-analyzer-inlay-hints
      hook window -group rust-inlay-hints InsertIdle .* rust-analyzer-inlay-hints
      hook -once -always window WinSetOption filetype=.* %{
        remove-hooks window rust-inlay-hints
      }
    }

    hook global WinSetOption filetype=lsp-goto %{
        map buffer normal '<ret>' ":lsp-jump<ret>"
    }


# User Interface

    set-option global ui_options ncurses_assistant=none ncurses_change_colors=false ncurses_enable_mouse=false
    # set-option global ui_options ncurses_enable_mouse=false
    # set-option global ui_options 
    hook global WinCreate ^[^*]+$ %{
        add-highlighter window/ number-lines -hlcursor -separator " " -relative
    }
    add-highlighter global/ regex \h+$ 0:Error
    set-option global scrolloff 4,5
    hook global WinResize .* %{
        evaluate-commands %sh{
            if [ "$(echo "$kak_window_range" | cut -d ' ' -f 3)" -gt 35 ]; then
                echo 'set-option global scrolloff 18,5'
            else
                echo 'set-option global scrolloff 4,5'
            fi
        }
    }

    set-option global windowing_modules "x11"


# File space / tab etc

    hook global BufOpenFile .* %{ editorconfig-load }
    hook global BufNewFile .* %{ editorconfig-load }

    add-highlighter global/ wrap -word -indent
    hook global WinCreate .* %{
        colorscheme tomorrow-night
    }
    set-option global tabstop 4
    set-option global indentwidth 4

# Filetypes

    hook global WinSetOption filetype=sh %{
        set-option global lintcmd "shellcheck -f gcc -"
        set-option window formatcmd '/home/fozz/go/bin/shfmt -ci -sr'
    }

    hook global WinSetOption filetype=(css|scss) %{
        set-option window formatcmd 'prettier --parser=scss'
    }

# Xmux

    plug "forbesmyester/xmux.kak" defer "xmux" %{
        # map global user r ' :xmux-repl<ret>' -docstring 'repl'
        # map global user t ' :prompt ''name:'' ''xmux-repl "" %val{text}''<ret>' -docstring 'term'
    }

plug "forbesmyester/set-run-after-write.kak"

# Connect
    # plug "kakounedotcom/connect.kak" defer connect %{
    #     # map global user F ' :connect-terminal sh -c '':e "$(fzf)"''<ret>' -docstring 'files'
    #     map global user F ' :connect-terminal sh -c '':e "$(broot --color yes --conf /home/fozz/Projects/dotfiles/broot/select.toml)"''<ret>' -docstring 'files'
    #     map global user B ' :connect-terminal sh -c '':b "$(:ls | fzf)"''<ret>' -docstring 'buffers'
    #     map global user G ' :connect-terminal sh -c '':e "$(rg . | fzf | sed "s/\:.*//")"''<ret>' -docstring 'search'
    # } config %{ } demand
    require-module prelude
    require-module connect
    # map global user f ' :connect-terminal sh -c '':e "$(broot --color yes --conf /home/fozz/Projects/dotfiles/broot/select.toml)"''<ret>' -docstring 'files'
    map global user f ' :connect-terminal sh -c '':e "$(fzf)"''<ret>' -docstring 'files'
    map global user g ' :connect-terminal sh -c '':e "$(rg . | fzf | sed "s/\:.*//")"''<ret>' -docstring 'search'


plug "Delapouite/kakoune-registers"
    define-command show-registers -docstring 'populate an info box with the content of registers' %{
        list-registers
        try %{ execute-keys '%<a-s>s^.{50}\K[^\n]*<ret>câ€¦<esc>' }
        execute-keys '%'
        declare-option -hidden str-list reg_info %val{selection}
        delete-buffer
        info -title registers -- %opt{reg_info}
    }
    map global user '"' ' :show-registers<ret>' -docstring 'show-registers'

# plug 'delapouite/kakoune-buffers' %{
#     #  map global normal "'" q
#     #  map global normal "@" Q
#     #  map global normal q b
#     #  map global normal Q B
#     #  map global normal <a-q> <a-b>
#     #  map global normal <a-Q> <a-B>
#     map global user b ': enter-buffers-mode<ret>' -docstring 'buffers'
#     map global user B ': enter-user-mode -lock buffers<ret>' -docstring 'buffers (lock)'
# }

# plug "lePerdu/kakboard" %{
    # hook global WinCreate .* %{ kakboard-enable }
# }
# map global user , ' :lsp-hover<ret>' -docstring 'lsp-hover'




declare-user-mode clipboard
declare-user-mode xmux
map global clipboard p '|xclip -selection clipboard -o<ret>' -docstring 'paste from clipboard'
map global clipboard P 'yp|xclip -selection clipboard -o<ret>' -docstring 'paste from clipboard'
map global clipboard y '<a-|>xclip -selection clipboard -i<ret>' -docstring 'yank into clipboard'
map global user c ':enter-user-mode clipboard<ret>' -docstring "Clipboard"
map global user y '<a-|>xclip -selection clipboard -i<ret>' -docstring 'yank into clipboard'
map global normal y 'y,y'
map global user R '|xclip -selection clipboard -o<ret>' -docstring 'paste over from clipboard'
map global user p 'yP|xclip -selection clipboard -o<ret>' -docstring 'paste after from clipboard'
map global user P 'yp|xclip -selection clipboard -o<ret>' -docstring 'paste before from clipboard'
map global user s ':enter-user-mode mirror<ret>' -docstring "Surround"
map global user x ':enter-user-mode xmux<ret>' -docstring "XMUX"
map global xmux p '<a-i>p:xmux-lines-default<ret>' -docstring 'Send Paragraph'
map global xmux p '<a-i>p:xmux-lines-default<ret>' -docstring 'Send Paragraph'
map global xmux c ':xmux-key-default "C-c"<ret>'
map global xmux 0 ':xmux-key-default "F10"<ret>'
map global xmux ';' ':xmux-lines-default ";"<ret>'
# map global surround d "|sed '$ s/\(.*\)./\1/' | sed '1 s/.\(.*\)/\1/'<ret>"  -docstring 'Delete outer char'
# map global surround s ':echo %opt{kak_source}'
# map global surround s "on-key 'awk -v WRAP_START=""("" -v WRAP_END='')'' ''BEGIN { L=0 }; NR>1 { print ""NL"" }; { printf(""%s%s"",WRAP_START,$0); WRAP_START=""""; }; END { print WRAP_END }'"  -docstring 'Surround outer char'
#map bal surround s ":on-key 'execute-keys "| sed ''s/^/X/'''<ret>"""  -docstring 'Surround outer char'




# plug "alexherbo2/yank-ring.kak" %{
# }


# plug "https://gitlab.com/Screwtapello/kakoune-shellcheck"

plug 'delapouite/kakoune-mirror' %{
  # Suggested mapping
  # map global normal "'" ': enter-user-mode mirror<ret>'
}

# plug 'alexherbo2/surround.kak' %{
#     require-module surround
# }
# 
# plug "h-youhei/kakoune-surround" %{
#     declare-user-mode surround
#     map global surround s ':surround<ret>' -docstring 'surround'
#     map global surround c ':change-surround<ret>' -docstring 'change'
#     map global surround d ':delete-surround<ret>' -docstring 'delete'
#     map global surround t ':select-surrounding-tag<ret>' -docstring 'select tag'
#     map global user s ':enter-user-mode surround<ret>' -docstring "Surround"
# }


# map -docstring "Enter LSP mode" global goto gl '\: enter-user-mode lsp<ret>'

plug "andreyorst/smarttab.kak" defer smarttab %{
        # when `backspace' is pressed, 4 spaces are deleted at once
        set-option global softtabstop 4
    } config %{
        # these languages will use `expandtab' behavior
        hook global WinSetOption filetype=.* expandtab
        # these languages will use `noexpandtab' behavior
        hook global WinSetOption filetype=(makefile|gas) noexpandtab
        # these languages will use `smarttab' behavior
        hook global WinSetOption filetype=(c|cpp) smarttab
    }

# plug "andreyorst/fzf.kak"
#        Linux) copy="xclip -selection clipboard -i"; paste="xclip -selection clipboard -o" ;;
#        Linux) copy="tee /tmp/zzz"; paste="xclip -selection clipboard -o" ;;

# evaluate-commands %sh{
#     case $(uname) in
#         Linux) copy="xclip -selection clipboard -i"; paste="xclip -selection clipboard -o" ;;
#         Darwin)  copy="pbcopy"; paste="pbpaste" ;;
#     esac
#     printf "map global user -docstring 'paste (after) from clipboard' p '!%s<ret>'\n" "$paste"
#     printf "map global user -docstring 'paste (before) from clipboard' P '<a-!>%s<ret>'\n" "$paste"
#     printf "map global user -docstring 'yank to clipboard' y '<a-|>%s<ret>:echo -markup %%{{Information}copied selection to X11 clipboard}<ret>'\n" "$copy"
#     printf "map global user -docstring 'replace from clipboard' R '|%s<ret>'\n" "$paste"
# }

# Make editing mode more prominent

    hook global ModeChange .*:insert %{
        set-face window PrimarySelection black,blue+F
        set-face window SecondarySelection black,blue+F
        set-face window PrimaryCursor black,bright-yellow+F
        set-face window SecondaryCursor black,bright-blue+F
        set-face window PrimaryCursorEol black,bright-yellow+F
        set-face window SecondaryCursorEol black,bright-blue+F
    }

    hook global ModeChange .*:normal %{
        unset-face window PrimarySelection
        unset-face window SecondarySelection
        unset-face window PrimaryCursor
        unset-face window SecondaryCursor
        unset-face window PrimaryCursorEol
        unset-face window SecondaryCursorEol
    }


map global normal x '<a-x>'
map global normal '<a-x>' '<a-:>J<a-L>'
map global normal '<a-X>' '<a-:><a-;>K'
# map global normal '<ret>' ' ;'
# map global normal '#' '`'
# map global normal '<a-`>' '~'
# map global normal 'Â¬' '~'
map global normal '#' '`'
# map global normal "'" "," # Seems to be free - use instead of comma?
