source "%val{config}/plugins/plug.kak/rc/plug.kak"


# kak-lsp

    eval %sh{kak-lsp --kakoune -s $kak_session}

    # set global lsp_cmd "kak-lsp -s %val{session} -vvv --log /tmp/kak-lsp.log"
    hook global WinSetOption filetype=(rust|python|go|javascript|typescript|c|cpp) %{
        lsp-enable-window
        lsp-auto-signature-help-enable
    }

    hook global WinSetOption filetype=rust %{
      hook window -group semantic-tokens BufReload .* lsp-semantic-tokens
      hook window -group semantic-tokens NormalIdle .* lsp-semantic-tokens
      hook window -group semantic-tokens InsertIdle .* lsp-semantic-tokens
      hook -once -always window WinSetOption filetype=.* %{
        remove-hooks window semantic-tokens
      }
    }

    hook global WinSetOption filetype=rust %{
      hook window -group rust-inlay-hints BufReload .* rust-analyzer-inlay-hints
      hook window -group rust-inlay-hints NormalIdle .* rust-analyzer-inlay-hints
      hook window -group rust-inlay-hints InsertIdle .* rust-analyzer-inlay-hints
      hook -once -always window WinSetOption filetype=.* %{
        remove-hooks window rust-inlay-hints
      }
    }

# User Interface

    set-option global ui_options ncurses_change_colors=false ncurses_enable_mouse=false
    hook global WinCreate ^[^*]+$ %{
        add-highlighter window/ number-lines -hlcursor -separator " " -relative
    }
    set-option global scrolloff 3,5
    add-highlighter global/ regex \h+$ 0:Error

# File space / tab etc

    hook global BufOpenFile .* %{ editorconfig-load }
    hook global BufNewFile .* %{ editorconfig-load }

    hook global WinCreate .* %{
        # declare-option str termcmd 'uxterm -e sh -c'
        colorscheme tomorrow-night
        add-highlighter global/ wrap -indent # -word
    }

    # set-option global tabstop 4
    # set-option global indentwidth 4

# Filetypes

    hook global WinSetOption filetype=sh %{
        set-option global lintcmd "shellcheck  -f gcc -"
        set-option window formatcmd '/home/fozz/go/bin/shfmt -ci -sr'
    }

    hook global WinSetOption filetype=(css|scss) %{
        set-option window formatcmd 'prettier --parser=scss'
    }

plug "forbesmyester/set-run-after-write.kak"
plug "forbesmyester/xmux.kak"

plug "lePerdu/kakboard" %{
    hook global WinCreate .* %{ kakboard-enable }
}

# plug "alexherbo2/yank-ring.kak" %{
# }

# Connect
    plug "alexherbo2/prelude.kak"
    plug "alexherbo2/connect.kak" defer connect %{} config %{
        define-command nnn-persistent -params 0..1 -file-completion -docstring 'Open file with nnn' %{
            connect-terminal nnn %sh{echo "${@:-$(dirname "$kak_buffile")}"}
        }

        map global user t ' :connect-terminal<ret>' -docstring 'open terminal'

        alias global nnn nnn-persistent
    } demand
    require-module prelude
    require-module connect


# plug "https://gitlab.com/Screwtapello/kakoune-shellcheck"

# plug 'delapouite/kakoune-mirror' %{
#   # Suggested mapping
#   map global normal "'" ': enter-user-mode -lock mirror<ret>'
# }

plug 'alexherbo2/surround.kak'

# plug "h-youhei/kakoune-surround" %{
#     declare-user-mode surround
#     map global surround s ':surround<ret>' -docstring 'surround'
#     map global surround c ':change-surround<ret>' -docstring 'change'
#     map global surround d ':delete-surround<ret>' -docstring 'delete'
#     map global surround t ':select-surrounding-tag<ret>' -docstring 'select tag'
#     map global user s ':enter-user-mode surround<ret>' -docstring "Surround"
# }


# map -docstring "Enter LSP mode" global goto gl '\: enter-user-mode lsp<ret>'

plug "andreyorst/smarttab.kak" defer smarttab %{
    # when `backspace' is pressed, 4 spaces are deleted at once
    set-option global softtabstop 4
} config %{
    # these languages will use `expandtab' behavior
    hook global WinSetOption filetype=(rust|markdown|kak|lisp|scheme|sh|perl|typescript|scala) expandtab
    # these languages will use `noexpandtab' behavior
    hook global WinSetOption filetype=(makefile|gas) noexpandtab
    # these languages will use `smarttab' behavior
    hook global WinSetOption filetype=(c|cpp) smarttab
}

# plug "andreyorst/powerline.kak" config %{
#     powerline-start
# }

plug "andreyorst/fzf.kak"

# evaluate-commands %sh{
#     case $(uname) in
#         Linux) copy="xclip -selection clipboard -i"; paste="xclip -selection clipboard -o" ;;
#         Darwin)  copy="pbcopy"; paste="pbpaste" ;;
#     esac
#
#     printf "map global user -docstring 'paste (after) from clipboard' p '!%s<ret>'\n" "$paste"
#     printf "map global user -docstring 'paste (before) from clipboard' P '<a-!>%s<ret>'\n" "$paste"
#     printf "map global user -docstring 'yank to clipboard' y '<a-|>%s<ret>:echo -markup %%{{Information}copied selection to X11 clipboard}<ret>'\n" "$copy"
#     printf "map global user -docstring 'replace from clipboard' R '|%s<ret>'\n" "$paste"
# }

define-command -hidden -docstring \
"select a word under cursor, or add cursor on next occurrence of current selection" \
select-or-add-cursor %{
    try %{
        execute-keys "<a-k>\A.\z<ret>"
        execute-keys -save-regs '' "_<a-i>w*"
    } catch %{
        execute-keys -save-regs '' "_*<s-n>"
    } catch nop
}

map global normal '<ret>' ';'

